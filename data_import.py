# -*- coding: utf-8 -*-
"""data_import.ipynb

Automatically generated by Colab.
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext sql

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# sqlite:///agri_prod.db

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# CREATE TABLE cheese_production (
#   Year INTEGER,
#   Period TEXT,
#   Geo_Level TEXT,
#   State_ANSI INTEGER,
#   Commodity_ID INTEGER,
#   Domain TEXT,
#   Value INTEGER
# );
#
# CREATE TABLE honey_production (
#   Year INTEGER,
#   Geo_Level TEXT,
#   State_ANSI INTEGER,
#   Commodity_ID INTEGER,
#   Value INTEGER
# );
#
#
# CREATE TABLE milk_production (
#   Year INTEGER,
#   Period TEXT,
#   Geo_Level TEXT,
#   State_ANSI INTEGER,
#   Commodity_ID INTEGER,
#   Domain TEXT,
#   Value INTEGER
# );
#
#
# CREATE TABLE coffee_production (
#   Year INTEGER,
#   Period TEXT,
#   Geo_Level TEXT,
#   State_ANSI INTEGER,
#   Commodity_ID INTEGER,
#   Value INTEGER
# );
#
#
# CREATE TABLE egg_production (
#   Year INTEGER,
#   Period TEXT,
#   Geo_Level TEXT,
#   State_ANSI INTEGER,
#   Commodity_ID INTEGER,
#   Value INTEGER
# );
#
#
# CREATE TABLE state_lookup (
#   State TEXT,
#   State_ANSI INTEGER
# );
#
#
# CREATE TABLE yogurt_production (
#   Year INTEGER,
#   Period TEXT,
#   Geo_Level TEXT,
#   State_ANSI INTEGER,
#   Commodity_ID INTEGER,
#   Domain TEXT,
#   Value INTEGER
# );
#

import pandas as pd
import csv
import sqlite3

print("\n Converting CSV to dataframe")
cheese_df = pd.read_csv(
    filepath_or_buffer = '/content/agri_data/cheese_production.csv',
    header = 0,
    index_col = False

)

coffee_df = pd.read_csv(
    filepath_or_buffer = '/content/agri_data/coffee_production.csv',
    header = 0,
    index_col = False

)

egg_df = pd.read_csv(
    filepath_or_buffer = '/content/agri_data/egg_production.csv',
    header = 0,
    index_col = False

)

honey_df = pd.read_csv(
    filepath_or_buffer = '/content/agri_data/honey_production.csv',
    header = 0,
    index_col = False

)

milk_df = pd.read_csv(
    filepath_or_buffer = '/content/agri_data/milk_production.csv',
    header = 0,
    index_col = False

)

state_lookup_df = pd.read_csv(
    filepath_or_buffer = '/content/agri_data/state_lookup.csv',
    header = 0,
    index_col = False

)

yogurt_df = pd.read_csv(
    filepath_or_buffer = '/content/agri_data/yogurt_production.csv',
    header = 0,
    index_col = False

)

print(cheese_df)

print(cheese_df.dtypes)

print(coffee_df)

print(coffee_df.dtypes)

print(egg_df)

print(egg_df.dtypes)

print(honey_df)

print(honey_df.dtypes)

print(milk_df)

print(milk_df.dtypes)

print(yogurt_df)

print(yogurt_df.dtypes)

print(state_lookup_df)

print(state_lookup_df.dtypes)

print("\nConnecting to SQLite Database")
connection = sqlite3.connect('/content/agri_prod.db')

from sqlalchemy.types import Integer, String

cheese_df.to_sql(
    name = 'cheese_production',
    con = connection,
    if_exists = 'replace',
    index = False,
    # dtype = {
    #     'Year': Integer(),
    #     'Period': String(),
    #     'Geo_Level': String(),
    #     'State_ANSI': Integer(),
    #     'Commodity_ID': Integer(),
    #     'Domain': String(),
    #     'Value': Integer()
    # }
)

coffee_df.to_sql(
    name = 'coffee_production',
    con = connection,
    if_exists = 'replace',
    index = False,
)

egg_df.to_sql(
    name = 'egg_production',
    con = connection,
    if_exists = 'replace',
    index = False,
)

honey_df.to_sql(
    name = 'honey_production',
    con = connection,
    if_exists = 'replace',
    index = False,
)

milk_df.to_sql(
    name = 'milk_production',
    con = connection,
    if_exists = 'replace',
    index = False,
)

yogurt_df.to_sql(
    name = 'yogurt_production',
    con = connection,
    if_exists = 'replace',
    index = False,
)

state_lookup_df.to_sql(
    name = 'state_lookup',
    con = connection,
    if_exists = 'replace',
    index = False,
)

connection.commit()
connection.close()

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# select *
# from state_lookup
# limit 5
# ;

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# PRAGMA table_info(cheese_production);
